# This workflow will build a MuleSoft project and deploy to CloudHub Development and Integration Environments

name: Dev & Int Deployment

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      businessGroup:
        description: 'Anypoint Business Group'
        default: 'Emerson\ComRes'
        required: true
      environment:
        description: 'Non Prod Environment Name'
        default: 'CPIS-Development'
        required: true
      workerType:
        description: 'Cloudhub Worker Type (MICRO - 0.1vCores, SMALL -0.2vCores, MEDIUM -1vCores, LARGE -2vCores,XLARGE -4vCores,XXLARGE -8vCores, 4XLARGE -16vCores)'
        default: 'MICRO'
        required: true
      workers:
        description: 'Cloudhub Workers (1 to 8)'
        default: '1'
        required: true
      version:
        description: Version of application
        default: 'v1'
        required: false
        
        

jobs:
  buildDev:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master' && contains(github.event.inputs.environment,'Development')
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build
      env:
        GITHUB_USER: ${{ secrets.GIT_USER }}
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        env: dev
        key: ${{ secrets.MULE_KEY }}
        MULE_NEXUS_USER: ${{secrets.MULE_NEXUS_USER}}
        MULE_NEXUS_PASSWORD: ${{secrets.MULE_NEXUS_PASSWORD}}
      run: mvn -s $GITHUB_WORKSPACE/.github/workflows/settings.xml -B package --file pom.xml      
    - name: Stamp artifact file name with commit hash
      run: | 
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    - uses: actions/upload-artifact@main
      with:
          name: artifacts
          path: target/*.jar
  buildInt:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master' && contains(github.event.inputs.environment,'Integration')
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build
      env:
        GITHUB_USER: ${{ secrets.GIT_USER }}
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        env: int
        key: ${{ secrets.MULE_KEY }}
        MULE_NEXUS_USER: ${{secrets.MULE_NEXUS_USER}}
        MULE_NEXUS_PASSWORD: ${{secrets.MULE_NEXUS_PASSWORD}}
      run: mvn -s $GITHUB_WORKSPACE/.github/workflows/settings.xml -B package --file pom.xml   
    - name: Stamp artifact file name with commit hash
      run: | 
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    - uses: actions/upload-artifact@main
      with:
          name: artifacts
          path: target/*.jar
      
  deployDev:
    needs: buildDev
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master' && contains(github.event.inputs.environment,'Development')
    steps:    
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/download-artifact@main
      with:
        name: artifacts
    - name: Deploy to CloudHub
      env:
        USERNAME: ${{ secrets.ANYPOINT_USER }}
        PASSWORD: ${{ secrets.ANYPOINT_PASSWORD }}
        GITHUB_USER: ${{ secrets.GIT_USER }}
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        ANYPOINT_ORG: ${{github.event.inputs.businessGroup}}
        CH_ENV: ${{github.event.inputs.environment}}
        CH_WORKERTYPE: ${{github.event.inputs.workerType}}
        CH_WORKERS: ${{github.event.inputs.workers}}
        env: dev
        key: ${{ secrets.MULE_KEY }}
        ANYPOINT_CLIENT_ID: ${{ secrets.ANYPOINT_CLIENT_ID_DEV}}
        ANYPOINT_CLIENT_SECRET: ${{ secrets.ANYPOINT_CLIENT_SECRET_DEV}}
        
        
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn mule:deploy -Dmule.artifact=$artifactName -Danypoint.userName="$USERNAME" -Danypoint.password="$PASSWORD" -DBUILD_NAME=d-${{ github.event.repository.name }}-${{github.event.inputs.version}}
        
  deployInt:
    needs: buildInt
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master' && contains(github.event.inputs.environment,'Integration')
    steps:    
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/download-artifact@main
      with:
        name: artifacts
    - name: Deploy to CloudHub
      env:
        USERNAME: ${{ secrets.ANYPOINT_USER }}
        PASSWORD: ${{ secrets.ANYPOINT_PASSWORD }}
        GITHUB_USER: ${{ secrets.GIT_USER }}
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        BUILD_NAME: i-${{ github.event.repository.name }}
        ANYPOINT_ORG: ${{github.event.inputs.businessGroup}}
        CH_ENV: ${{github.event.inputs.environment}}
        CH_WORKERTYPE: ${{github.event.inputs.workerType}}
        CH_WORKERS: ${{github.event.inputs.workers}}
        env: int
        key: ${{ secrets.MULE_KEY }}
        ANYPOINT_CLIENT_ID: ${{ secrets.ANYPOINT_CLIENT_ID_INT}}
        ANYPOINT_CLIENT_SECRET: ${{ secrets.ANYPOINT_CLIENT_SECRET_INT}}
        
        
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn mule:deploy -Dmule.artifact=$artifactName -Danypoint.userName="$USERNAME" -Danypoint.password="$PASSWORD"
  
